name: Render and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: render-build-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  MAP_IMAGES_CACHE_BUST_VERSION: v1
  MAP_RENDERER_CACHE_BUST_VERSION: v1

jobs:
  build-renderer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Sunrise submodule version
        id: submodule-sha
        run: echo "SUBMODULE_SHA=$(git ls-tree --object-only HEAD ss14-sunrise)" >> $GITHUB_ENV

      - name: Cache renderer
        id: cache-renderer
        uses: actions/cache@v4
        with:
          key: build-renderer-${{ env.SUBMODULE_SHA }}-${{ env.MAP_RENDERER_CACHE_BUST_VERSION }}
          path: ss14-sunrise/bin
          lookup-only: true # Skip download as the job doesn't need it

      - name: Checkout submodules reqursively
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: git submodule update --init --recursive --single-branch --depth 1

      - name: Set up .NET
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore .NET dependencies
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: dotnet restore ss14-sunrise/Content.MapRenderer

      - name: Apply map renderer patch
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: git -C ss14-sunrise apply ../patches/map-renderer.patch

      - name: Build map renderer
        if: ${{ steps.cache-renderer.outputs.cache-hit != 'true' }}
        run: dotnet build ss14-sunrise/Content.MapRenderer --configuration Release --no-restore

  render:
    runs-on: ubuntu-latest
    needs: build-renderer

    strategy:
      matrix:
        # See Resources/Prototypes/_Sunrise/Maps/Pools/default.yml
        map: [SunriseDelta, SunriseBox]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Sunrise submodule version
        id: submodule-sha
        run: echo "SUBMODULE_SHA=$(git ls-tree --object-only HEAD ss14-sunrise)" >> $GITHUB_ENV

      - name: Cache map images
        id: cache-images
        uses: actions/cache@v4
        with:
          key: map-${{ matrix.map }}-${{ env.SUBMODULE_SHA }}-${{ env.MAP_IMAGES_CACHE_BUST_VERSION }}
          path: ss14-sunrise/Resources/MapImages

      - name: Checkout Sunrise and Robust submodules
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        run: |
          git submodule update --init --single-branch --depth 1 ss14-sunrise
          git -C ss14-sunrise submodule update --init --single-branch --depth 1 RobustToolbox

      - name: Restore map renderer
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        id: restore-map-renderer
        uses: actions/cache/restore@v4
        with:
          key: build-renderer-${{ env.SUBMODULE_SHA }}-${{ env.MAP_RENDERER_CACHE_BUST_VERSION }}
          path: ss14-sunrise/bin
          fail-on-cache-miss: true

      - name: Set up .NET
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Render map
        if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        run: ss14-sunrise/bin/Content.MapRenderer/Content.MapRenderer --viewer --format webp "${{ matrix.map }}"

      - name: Upload map images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: map-${{ matrix.map }}
          path: ss14-sunrise/Resources/MapImages

  build-viewer:
    runs-on: ubuntu-latest
    needs: render

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download map images
        uses: actions/download-artifact@v4
        with:
          path: public/maps
          pattern: map-*
          merge-multiple: true

      - name: List map images
        run: ls -R public/maps

      - name: Install libvips
        run: |
          sudo apt update
          sudo apt install -y libvips-dev

      - name: Cut map images into tiles
        run: scripts/cut-into-tiles.sh

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Create map list
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: npm run create-maps-list

      - name: Build map viewer
        run: npm run build

      - name: Upload map viewer files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: build-viewer

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
