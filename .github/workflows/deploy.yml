name: Render, Build, and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore rendered maps from cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: public/maps
          key: v1 # TODO: use submodule hash

      - name: Checkout submodules
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: git submodule update --init --recursive

      - name: Set up .NET
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore .NET dependencies
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: dotnet restore ss14-sunrise/Content.MapRenderer

      - name: Apply map renderer patch
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: git -C ss14-sunrise apply ../patches/update-map-renderer.patch
      
      - name: Build map renderer
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: dotnet build ss14-sunrise/Content.MapRenderer --configuration Release --no-restore

      - name: Render maps
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: dotnet run --project ss14-sunrise/Content.MapRenderer --no-restore -- --viewer Dev SunriseBox

      - name: Write map list file
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: |
          echo '{"maps": [
            { "id": "Dev", "name": "Dev"},
            { "id": "SunriseBox", "name": "Box" }
          ]}' > public/maps/list.json

      - name: Move rendered maps
        if: ${{ steps.restore-cache.outputs.cache-hit != 'true' }}
        run: mv ss14-sunrise/Resources/MapImages/* public/maps

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Build map viewer
        run: npm run build

      - name: Upload files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
